<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Optimization on Thomas Tran Portfolio</title>
    <link>https://tranindigo.github.io/categories/optimization/</link>
    <description>Recent content in Optimization on Thomas Tran Portfolio</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 04 Sep 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://tranindigo.github.io/categories/optimization/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Memoization in Ruby and Python</title>
      <link>https://tranindigo.github.io/posts/memoization-in-ruby-and-python/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      <guid>https://tranindigo.github.io/posts/memoization-in-ruby-and-python/</guid>
      <description>Memoization refers to remembering results of method calls based on the method inputs and then returning the remembered result rather than computing the result again. You can think of it as a cache for method results but, unlike a cache, memoization doesn&amp;rsquo;t persist across different sessions and instances.&#xA;The thing that I really like about Ruby is that it has a streamlined way to memoize method calls. In Ruby, the most common pattern for memoizing a call is using the conditional assignment operator, like so:</description>
    </item>
    <item>
      <title>Rails Caching Strategies</title>
      <link>https://tranindigo.github.io/posts/rails-caching-strategies/</link>
      <pubDate>Tue, 25 Aug 2020 00:00:00 +0000</pubDate>
      <guid>https://tranindigo.github.io/posts/rails-caching-strategies/</guid>
      <description>Rails comes packaged with three types of caching techniques: page caching, action caching, and fragment caching. We&amp;rsquo;ll shortly talk about each strategy to better understand them.&#xA;Page caching Page caching allows the generated page to be fulfilled by the webserver without ever having to go through the Rails stack at all. This is very fast, but you can&amp;rsquo;t use it in every situation, such as pages that need authentication, and you&amp;rsquo;ll also have to deal with cache expiration as well.</description>
    </item>
    <item>
      <title>The HTTP/2 Optimization Revolution</title>
      <link>https://tranindigo.github.io/posts/the-http-2-optimization-revolution/</link>
      <pubDate>Thu, 20 Aug 2020 00:00:00 +0000</pubDate>
      <guid>https://tranindigo.github.io/posts/the-http-2-optimization-revolution/</guid>
      <description>HTTP/2 is the second iteration of HTTP (Hypertext Transfer Protocol), which it is also backwards-compatible with. The changes introduced in HTTP/2 affects how developers optimize websites and servers for speed and efficiency. Beyond shrinking and compressing images, minimizing page and script file sizes, you can also switch to HTTP/2.&#xA;Switching to HTTP/2 allows you to benefit from the immediate performance that you can gain from it, and because it is backwards compatible with HTTP/1.</description>
    </item>
  </channel>
</rss>
