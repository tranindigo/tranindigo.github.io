<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>aws on My New Hugo Site</title>
    <link>http://example.org/categories/aws/</link>
    <description>Recent content in aws on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 31 Aug 2020 00:00:00 +0000</lastBuildDate><atom:link href="http://example.org/categories/aws/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AWS CloudWatch: Monitoring &amp; Alarms</title>
      <link>http://example.org/posts/aws-cloudwatch-monitoring-alarms/</link>
      <pubDate>Mon, 31 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/posts/aws-cloudwatch-monitoring-alarms/</guid>
      <description>AWS CloudWatch is a fully-managed service for monitoring AWS services and workloads. For websites, apps, and microservices that are entirely hosted on AWS, this is a great cloud logging solution.
As a fully-managed service, it is very easy to manage log retention periods, which can be configured on a per-group basis. By default, CloudWatch stores the log data indefinitely. Another advantage of CloudWatch is that it allows you to easily monitor host performance of AWS services.</description>
    </item>
    
    <item>
      <title>An introduction to AWS KMS: Envelope Encryption</title>
      <link>http://example.org/posts/an-introduction-to-aws-kms/</link>
      <pubDate>Tue, 25 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/posts/an-introduction-to-aws-kms/</guid>
      <description>AWS Key Management Service (KMS) is a fully-managed service allows you to create and manage cryptographic keys and control their use across a wide range of AWS services. This is useful because it allows you to centrally manage the encryption keys that control access to your data.
Features KMS is durable to make sure that your keys are never lost. KMS stores multiple copies of encrypted versions of your keys in systems that are designed for 99.</description>
    </item>
    
    <item>
      <title>AWS Elasticache Caching Strategies</title>
      <link>http://example.org/posts/aws-elasticache-caching-strategies/</link>
      <pubDate>Sun, 19 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/posts/aws-elasticache-caching-strategies/</guid>
      <description>Caching strategies dictate how you can populate and access data in the cache. There are two main strategies that AWS Elasticache uses: lazy loading and write-through.
Lazy Loading Lazy loading, also known as cache-aside caching, is a popular caching strategy. It works like the following:
 When your application needs to read data from a database, it checks the cache first to determine whether the data is available. If the data is available (a cache hit), the cached data is returned.</description>
    </item>
    
    <item>
      <title>Basics of Amazon VPC and Subnets</title>
      <link>http://example.org/posts/basics-of-amazon-vpc-and-subnets/</link>
      <pubDate>Sat, 18 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/posts/basics-of-amazon-vpc-and-subnets/</guid>
      <description>Amazon Virtual Private Cloud (VPC) is a private data center within the AWS infrastructure. You are able to decide the range of network IPv4 address range when you create the VPC. There is no way to change your VPC&amp;rsquo;s network block after it has been created.
A VPC consists of many components. A few that will be highlighted in this article are: subnets, Internet Gateway, NAT Gateway, Route Table, and Network Access List.</description>
    </item>
    
  </channel>
</rss>
