<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My New Hugo Site</title>
    <link>https://tranindigo.github.io/</link>
    <description>Recent content on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 04 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://tranindigo.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Stored Procedures: Our Friendnemy in SQL</title>
      <link>https://tranindigo.github.io/posts/stored-procedures-our-friendnemy/</link>
      <pubDate>Thu, 04 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tranindigo.github.io/posts/stored-procedures-our-friendnemy/</guid>
      <description>A stored procedure is a SQL script that can be stored on the database server and called many times. Stored procedures have been falling out of favor for many years, in favor of Object-Relational-Mappers (ORM) like Hibernate, Entity Framework, and ActiveRecord. However, there are times when it makes sense to use them as part of your development process, such as working with legacy systems or with multiple systems that rely on the same database.</description>
    </item>
    
    <item>
      <title>Angular HTTP Interceptors: Modifying Request Headers</title>
      <link>https://tranindigo.github.io/posts/angular-http-interceptors-modifying-request-headers/</link>
      <pubDate>Wed, 17 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tranindigo.github.io/posts/angular-http-interceptors-modifying-request-headers/</guid>
      <description>In newer versions of Angular, HTTPInterceptor is an interface which intercepts and handles an HttpRequest or HTTPResponse, which allows you to transform the outgoing request or incoming response. This may be useful when you want to inject a header into your HTTPRequest that contains your authorization token or any other important changes to the request that is relevant to your business logic.
Some use cases for HTTP Interceptor may be:</description>
    </item>
    
    <item>
      <title>Memoization in Ruby and Python</title>
      <link>https://tranindigo.github.io/posts/memoization-in-ruby-and-python/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tranindigo.github.io/posts/memoization-in-ruby-and-python/</guid>
      <description>Memoization refers to remembering results of method calls based on the method inputs and then returning the remembered result rather than computing the result again. You can think of it as a cache for method results but, unlike a cache, memoization doesn&amp;rsquo;t persist across different sessions and instances.
The thing that I really like about Ruby is that it has a streamlined way to memoize method calls. In Ruby, the most common pattern for memoizing a call is using the conditional assignment operator, like so:</description>
    </item>
    
    <item>
      <title>AWS CloudWatch: Monitoring &amp; Alarms</title>
      <link>https://tranindigo.github.io/posts/aws-cloudwatch-monitoring-alarms/</link>
      <pubDate>Mon, 31 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tranindigo.github.io/posts/aws-cloudwatch-monitoring-alarms/</guid>
      <description>AWS CloudWatch is a fully-managed service for monitoring AWS services and workloads. For websites, apps, and microservices that are entirely hosted on AWS, this is a great cloud logging solution.
As a fully-managed service, it is very easy to manage log retention periods, which can be configured on a per-group basis. By default, CloudWatch stores the log data indefinitely. Another advantage of CloudWatch is that it allows you to easily monitor host performance of AWS services.</description>
    </item>
    
    <item>
      <title>An introduction to AWS KMS: Envelope Encryption</title>
      <link>https://tranindigo.github.io/posts/an-introduction-to-aws-kms/</link>
      <pubDate>Tue, 25 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tranindigo.github.io/posts/an-introduction-to-aws-kms/</guid>
      <description>AWS Key Management Service (KMS) is a fully-managed service allows you to create and manage cryptographic keys and control their use across a wide range of AWS services. This is useful because it allows you to centrally manage the encryption keys that control access to your data.
Features KMS is durable to make sure that your keys are never lost. KMS stores multiple copies of encrypted versions of your keys in systems that are designed for 99.</description>
    </item>
    
    <item>
      <title>Rails Caching Strategies</title>
      <link>https://tranindigo.github.io/posts/rails-caching-strategies/</link>
      <pubDate>Tue, 25 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tranindigo.github.io/posts/rails-caching-strategies/</guid>
      <description>Rails comes packaged with three types of caching techniques: page caching, action caching, and fragment caching. We&amp;rsquo;ll shortly talk about each strategy to better understand them.
Page caching Page caching allows the generated page to be fulfilled by the webserver without ever having to go through the Rails stack at all. This is very fast, but you can&amp;rsquo;t use it in every situation, such as pages that need authentication, and you&amp;rsquo;ll also have to deal with cache expiration as well.</description>
    </item>
    
    <item>
      <title>The HTTP/2 Optimization Revolution</title>
      <link>https://tranindigo.github.io/posts/the-http-2-optimization-revolution/</link>
      <pubDate>Thu, 20 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tranindigo.github.io/posts/the-http-2-optimization-revolution/</guid>
      <description>HTTP/2 is the second iteration of HTTP (Hypertext Transfer Protocol), which it is also backwards-compatible with. The changes introduced in HTTP/2 affects how developers optimize websites and servers for speed and efficiency. Beyond shrinking and compressing images, minimizing page and script file sizes, you can also switch to HTTP/2.
Switching to HTTP/2 allows you to benefit from the immediate performance that you can gain from it, and because it is backwards compatible with HTTP/1.</description>
    </item>
    
    <item>
      <title>AWS Elasticache Caching Strategies</title>
      <link>https://tranindigo.github.io/posts/aws-elasticache-caching-strategies/</link>
      <pubDate>Sun, 19 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tranindigo.github.io/posts/aws-elasticache-caching-strategies/</guid>
      <description>Caching strategies dictate how you can populate and access data in the cache. There are two main strategies that AWS Elasticache uses: lazy loading and write-through.
Lazy Loading Lazy loading, also known as cache-aside caching, is a popular caching strategy. It works like the following:
 When your application needs to read data from a database, it checks the cache first to determine whether the data is available. If the data is available (a cache hit), the cached data is returned.</description>
    </item>
    
    <item>
      <title>Ruby&#39;s Regexp Class</title>
      <link>https://tranindigo.github.io/posts/rubys-regexp-class/</link>
      <pubDate>Sun, 19 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tranindigo.github.io/posts/rubys-regexp-class/</guid>
      <description>A regular expression (regex) is a sequence of characters that define how to search and match patterns in a string. It is commonly used in all modern programming languages like Java, Ruby, and Python.
Ruby uses the class Regexp to store a regex. Regexp are delimited using the following literals and constructor:
/.../ %r{...} Regexp::new You can call the match() method to check whether a string contains the pattern. For instance:</description>
    </item>
    
    <item>
      <title>Basics of Amazon VPC and Subnets</title>
      <link>https://tranindigo.github.io/posts/basics-of-amazon-vpc-and-subnets/</link>
      <pubDate>Sat, 18 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tranindigo.github.io/posts/basics-of-amazon-vpc-and-subnets/</guid>
      <description>Amazon Virtual Private Cloud (VPC) is a private data center within the AWS infrastructure. You are able to decide the range of network IPv4 address range when you create the VPC. There is no way to change your VPC&amp;rsquo;s network block after it has been created.
A VPC consists of many components. A few that will be highlighted in this article are: subnets, Internet Gateway, NAT Gateway, Route Table, and Network Access List.</description>
    </item>
    
  </channel>
</rss>
